#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('conveyor-belt-system-controller:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
  *Socket IO
*/
io = require("socket.io")(server);
var connectedControllers = [];
var taken = [];

io.on('connection', function(socket) {
  socket.on('controller', function(){
    console.log('controller connected');
    connectedControllers.push(socket);
    taken.push(false);
    socket.emit('index', getIndex(socket));
  });

  socket.on('selected', function(){
    var i = getIndex(socket);
    taken[i] = true;
  });

  socket.on('deselected', function(){
    var i = getIndex(socket);
    taken[i] = false;
  });

  socket.on('reply', function(i){
    sendTime(i);
  });

  socket.on('getList', function(){
    socket.emit('list', connectedControllers.length)
  });

  socket.on('select', function(data, fn){
    var i = data.id;
    var result;

    console.log(data);
    if(!taken[i]){
      connectedControllers[i].emit('select', data);
      result = {status:200, i:i, message:'successfully selected this controller'};
    } else {
      result = {status:400, i:null, message:'controller already connected to other user'};
    }

    fn(result);
  })

  socket.on('deselect', function(data, fn){ 
    var i = data.i;
    var result;

    if(i != null && taken[i]){
      connectedControllers[i].emit('deselect', data);
      result = {status:200, i :null, message:'successfully deselected this controller'};
    } else {
      result = {status:400, message:'not connected to any controller'};
    }

    fn(result);
  });

  socket.on('message', function(data){
    var i = data.id;
    var message = data.message;
    var interface = getInterface(socket);
    if(i){
      connectedControllers[i].emit('message', {message:message, interface:interface});
      socket.emit('200', i);
    } else {
      socket.emit('400', 'not connected to any controller');
    }
  });

});

function sendTime(i){
  var interface = interfaces[i];
  interface.emit('time');
}

function getIndex(controller){
  return connectedControllers.indexOf(controller);
}
/* END OF SOCKET.IO CONFIG */

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
